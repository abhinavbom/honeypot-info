input
	{
	file {
		ignore_older => 0
		path => "/Users/darklord/Desktop/ssh-logs/logs/kippo-logs/*"
		type => "kippo"
		start_position => beginning
	}
	file {
	ignore_older => 0
    path => "/Users/darklord/Desktop/ssh-logs/logs/cowrie/*"
    type => "cowrie"
    start_position => beginning
	}
}

filter
	{
#Begin filter creation for Kippo honeypot
	if ([type] ==  "kippo") {
		#Following filter block looks for login attempts made to the ssh server.

			if ([message] =~ "ssh-userauth" and [message] =~ "login attempt") {
				grok {
						break_on_match => false
						match => ["message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE:zone} \[%{DATA:honeypot_info}%{DATA:session_count},%{IP:src_ip}\] login attempt \[%{DATA:attacker_username}/%{DATA:attacker_password}\]" ]
					}
      			mutate {
        				add_field => [ "attack_type", "bruteforce" ]
      				}
      		}

      	#Checks for authentication attempts

      		else if ( [message] =~ " trying auth ") {
				grok {
						match => ["message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE:zone} %{DATA:honeypot_info}%{NUMBER:session_count},%{IP:src_ip}\] %{DATA:attack_username} trying auth %{WORD:authmethod}" ]
					}
				mutate {
						add_field => [ "attack_type", "authentication" ]
					}
				}
		#new connection to honeypot

			else if ( [message] =~ "New connection:") {
				grok {
        				match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE:zone} \[%{DATA:honeypot_info}\] New connection: %{IP:src_ip}:%{DATA:src_port} \(%{IP:dst_ip}:%{DATA:dst_port}\) \[session: %{DATA:session_count}\]" ]
      				}
      			mutate {
        				add_field => [ "attack_type", "connection" ]
        			}
        		}
        #Command execution logs for kippo

        	else if ( [message] =~ "CMD:") {
        		grok {
        				match => ["message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE:zone} \[%{DATA:honeypot_info},%{NUMBER:session_count},%{IP:src_ip}\] CMD\: %{GREEDYDATA:cmdexec}" ]
        			}
        		mutate {
        				add_field => [ "attack_type", "cmd_execution" ]
        			}
			}
		#drop all other irrelevant logs

			else { drop{} }
        	mutate {
      				add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}%{zone}" ]
    			}
    		date {
        			match => [ "timestamp" , "yyyy-MM-dd HH:mm:ssZ" ]

    			}
    }


    if [type] == "cowrie" {

        json {
            source => message
        }

        date {
            match => [ "timestamp", "ISO8601" ]
        }

        if [src_ip]  {

            dns {
                reverse => [ "src_host", "src_ip" ]
                action => "append"
            }
    }
    }

#Geo-tagging IPs

    if ([type] == "kippo" or [type] == "cowrie") {
    geoip {
      source => "src_ip"
      target => "geoip"
      database =>"/var/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
    geoip {
      source => "src_ip"
      target => "geoip"
      database =>"/var/GeoIPASNum.dat"
      add_field => [ "[geoip][full]", "%{[geoip][number]} %{[geoip][asn]}" ]
    }
  }

}

output {
  elasticsearch {
                    hosts => "127.0.0.1"
                    index => "logstash-2-%{+YYYY.MM.dd}"
                    document_type => "honeypot"
                    

                }
  stdout { codec => rubydebug }
}
